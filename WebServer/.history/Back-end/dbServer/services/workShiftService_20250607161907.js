import WorkShift from "../models/Workshift.js";
import { notificationService } from "./notificationService.js";

class WorkShiftService {
    constructor() {
        // Map theo d√µi tr·∫°ng th√°i m√°y
        this.machineWorkStates = new Map();
        // Map l∆∞u data t·∫°m trong qu√° tr√¨nh l√†m vi·ªác
        this.tempShiftData = new Map();
        // Map ƒë√°nh d·∫•u m√°y ƒë√£ ƒë·ªçc initial data hay ch∆∞a
        this.initialDataRead = new Map();
    }

    async handleTracking(machine, registers) {
        const machineStatus = registers[0]; // 40001 - Tr·∫°ng th√°i ho·∫°t ƒë·ªông m√°y
        const machineKey = machine._id.toString();
        const previousState = this.machineWorkStates.get(machineKey);
        const currentTime = new Date();
        
        // T·∫°o d·ªØ li·ªáu parameters t·ª´ registers
        const currentParameters = {
            monitoringData: Object.fromEntries(Array.from({length: 7}, (_,i)=>[`4000${i+1}`, registers[i]||0])),
            adminData: Object.fromEntries(Array.from({length: 29}, (_,i)=>[(40008+i).toString(), registers[i+7]||0]))
        };

        try {
            // ‚úÖ B∆Ø·ªöC 1: KHI M·ªöI K·∫æT N·ªêI - ƒê·ªåC INITIAL DATA
            if (!this.initialDataRead.get(machineKey)) {
                await this.handleInitialConnection(machine, currentParameters, currentTime);
                this.initialDataRead.set(machineKey, true);
            }

            // ‚úÖ B∆Ø·ªöC 2: X·ª¨ L√ù LOGIC CA L√ÄMVI·ªÜC
            await this.processWorkShiftLogic(machine, registers, currentParameters, currentTime, previousState);

        } catch (error) {
            console.error(`‚ùå [${machine.name}] Work shift tracking error:`, error.message);
        }
    }

    // ‚úÖ X·ª¨ L√ù KHI M·ªöI K·∫æT N·ªêI - ƒê·ªåC INITIAL DATA
    async handleInitialConnection(machine, currentParameters, currentTime) {
        const machineKey = machine._id.toString();
        
        console.log(`üîå [${machine.name}] First connection - Reading initial shift data...`);

        try {
            // T√¨m ca active hi·ªán t·∫°i trong database
            const activeShift = await WorkShift.findOne({
                machineId: machine._id,
                status: 'active'
            }).sort({ startTime: -1 });

            if (activeShift) {
                console.log(`üìñ [${machine.name}] Found active shift: ${activeShift.shiftId}`);

                // So s√°nh data t·ª´ m√°y v·ªõi data trong database
                const hasDataChanged = this.compareShiftData(activeShift.finalData, currentParameters);
                
                if (hasDataChanged) {
                    console.log(`üîÑ [${machine.name}] Initial data differs from DB - Updating shift data...`);
                    
                    // C·∫≠p nh·∫≠t data m·ªõi v√†o database
                    activeShift.finalData = currentParameters;
                    activeShift.totalBottlesProduced = currentParameters.monitoringData['40007'] || 0;
                    
                    const totalWeightLow = currentParameters.monitoringData['40005'] || 0;
                    const totalWeightHigh = currentParameters.monitoringData['40006'] || 0;
                    activeShift.totalWeightFilled = (totalWeightHigh * 65536) + totalWeightLow;
                    
                    activeShift.updatedAt = currentTime;
                    await activeShift.save();
                    
                    console.log(`üíæ [${machine.name}] Shift data updated from machine`);
                } else {
                    console.log(`‚úÖ [${machine.name}] Initial data matches DB - No update needed`);
                }

                // Kh·ªüi t·∫°o state cho m√°y ƒëang l√†m vi·ªác
                this.machineWorkStates.set(machineKey, {
                    isWorking: true,
                    currentShiftId: activeShift.shiftId,
                    lastData: currentParameters,
                    shiftStartTime: activeShift.startTime
                });
                
                // Kh·ªüi t·∫°o temp data
                this.tempShiftData.set(machineKey, currentParameters);
                
            } else {
                console.log(`üìù [${machine.name}] No active shift found - Machine idle`);
                this.initializeMachineState(machine);
            }

        } catch (error) {
            console.error(`‚ùå [${machine.name}] Error reading initial shift data:`, error.message);
            this.initializeMachineState(machine);
        }
    }

    // ‚úÖ X·ª¨ L√ù LOGIC CA L√ÄMVI·ªÜC CH√çNH
    async processWorkShiftLogic(machine, registers, currentParameters, currentTime, previousState) {
        const machineStatus = registers[0]; // 40001 - Tr·∫°ng th√°i ho·∫°t ƒë·ªông m√°y
        const machineKey = machine._id.toString();

        // B·∫ÆT ƒê·∫¶U CA M·ªöI: 0 ‚Üí 1
        if (!previousState?.isWorking && machineStatus === 1) {
            await this.startNewWorkShift(machine, currentTime, currentParameters);
        }
        // ƒêANG L√ÄM VI·ªÜC: C·∫≠p nh·∫≠t data t·∫°m
        else if (previousState?.isWorking && machineStatus === 1) {
            this.updateTempShiftData(machine, currentParameters, currentTime);
        }
        // K·∫æT TH√öC CA: 1 ‚Üí 0 (TH1: D·ª´ng b√¨nh th∆∞·ªùng)
        else if (previousState?.isWorking && machineStatus === 0) {
            await this.endWorkShiftNormally(machine, currentParameters, currentTime, previousState);
        }
        // M√ÅY D·ª™NG: Initialize state n·∫øu ch∆∞a c√≥
        else {
            if (!previousState) {
                this.initializeMachineState(machine);
            }
        }
    }

    // ‚úÖ B·∫ÆT ƒê·∫¶U CA M·ªöI
    async startNewWorkShift(machine, currentTime, currentParameters) {
        const machineKey = machine._id.toString();
        
        console.log(`üü¢ [${machine.name}] Starting new work shift...`);
        
        const shiftId = `SHIFT_${machine.machineId}_${Date.now()}`;
        
        const newShift = new WorkShift({
            shiftId: shiftId,
            machineId: machine._id,
            machineName: machine.name,
            userId: machine.userId,
            startTime: currentTime,
            status: 'active',
            finalData: currentParameters, // L∆∞u data ban ƒë·∫ßu
            totalBottlesProduced: currentParameters.monitoringData['40007'] || 0,
            totalWeightFilled: this.calculateTotalWeight(currentParameters)
        });
        
        await newShift.save();
        console.log(`‚úÖ [${machine.name}] Work shift created: ${shiftId}`);
        
        
        // C·∫≠p nh·∫≠t state
        this.machineWorkStates.set(machineKey, {
            isWorking: true,
            currentShiftId: shiftId,
            lastData: currentParameters,
            shiftStartTime: currentTime
        });
        
        // Kh·ªüi t·∫°o temp data
        this.tempShiftData.set(machineKey, currentParameters);
    }

    // ‚úÖ C·∫¨P NH·∫¨T DATA T·∫†M TRONG QU√Å TR√åNH L√ÄM VI·ªÜC
    updateTempShiftData(machine, currentParameters, currentTime) {
        const machineKey = machine._id.toString();
        
        console.log(`üîÑ [${machine.name}] Updating temp shift data...`);
        
        // C·∫≠p nh·∫≠t data t·∫°m
        this.tempShiftData.set(machineKey, {
            ...currentParameters,
            lastUpdateTime: currentTime
        });
        
        // C·∫≠p nh·∫≠t state
        const previousState = this.machineWorkStates.get(machineKey);
        this.machineWorkStates.set(machineKey, {
            ...previousState,
            lastData: currentParameters,
            lastUpdateTime: currentTime
        });
    }

    // ‚úÖ K·∫æT TH√öC CA B√åNH TH∆Ø·ªúNG (TH1)
    async endWorkShiftNormally(machine, currentParameters, currentTime, previousState) {
        const machineKey = machine._id.toString();
        
        console.log(`üî¥ [${machine.name}] Ending work shift normally...`);
        
        try {
            const activeShift = await WorkShift.findOne({
                shiftId: previousState.currentShiftId,
                status: 'active'
            });
            
            if (activeShift) {
                // L·∫•y temp data
                const tempData = this.tempShiftData.get(machineKey);
                
                // So s√°nh current data v·ªõi temp data
                const dataMatches = this.compareShiftData(currentParameters, tempData);
                
                let finalData, completionStatus;
                
                if (dataMatches) {
                    // Data kh·ªõp - l∆∞u current data, ƒë√°nh d·∫•u ho√†n ch·ªânh
                    finalData = currentParameters;
                    completionStatus = 'completed';
                    console.log(`‚úÖ [${machine.name}] Data matches - Shift completed successfully`);
                } else {
                    // Data ch∆∞a kh·ªõp - l∆∞u temp data, ƒë√°nh d·∫•u ch∆∞a ho√†n ch·ªânh
                    finalData = tempData;
                    completionStatus = 'incomplete';
                    console.log(`‚ö†Ô∏è [${machine.name}] Data mismatch - Saving temp data, marked incomplete`);
                }
                
                // C·∫≠p nh·∫≠t shift
                await this.updateShiftCompletion(activeShift, finalData, currentTime, completionStatus);
                
                // Cleanup
                this.cleanupMachineData(machineKey);
                
            } else {
                console.error(`‚ùå [${machine.name}] Active shift not found for: ${previousState.currentShiftId}`);
            }
            
        } catch (error) {
            console.error(`‚ùå [${machine.name}] Error ending shift normally:`, error.message);
            
            // Fallback: L∆∞u temp data
            await this.saveIncompleteShift(machine, previousState, currentTime);
        }
    }

    // ‚úÖ X·ª¨ L√ù M·∫§T K·∫æT N·ªêI ƒê·ªòT NG·ªòT (TH2)
    async handleConnectionLoss(machine) {
        const machineKey = machine._id.toString();
        const currentState = this.machineWorkStates.get(machineKey);
        
        if (currentState?.isWorking) {
            console.log(`üö® [${machine.name}] Connection lost during shift - Saving temp data...`);
            
            try {
                const activeShift = await WorkShift.findOne({
                    shiftId: currentState.currentShiftId,
                    status: 'active'
                });
                
                if (activeShift) {
                    const tempData = this.tempShiftData.get(machineKey);
                    
                    // L∆∞u temp data, ƒë√°nh d·∫•u interrupted
                    activeShift.finalData = tempData || currentState.lastData;
                    activeShift.status = 'interrupted';
                    activeShift.updatedAt = new Date();
                    activeShift.totalBottlesProduced = (tempData?.monitoringData['40007'] || 0);
                    activeShift.totalWeightFilled = this.calculateTotalWeight(tempData || currentState.lastData);
                    
                    await activeShift.save();
                    console.log(`üíæ [${machine.name}] Temp data saved due to connection loss`);
                }
                
            } catch (error) {
                console.error(`‚ùå [${machine.name}] Error saving data after connection loss:`, error.message);
            }
        }
        
        // Reset initial data read flag ƒë·ªÉ l·∫ßn k·∫øt n·ªëi ti·∫øp theo ƒë·ªçc l·∫°i
        this.initialDataRead.set(machineKey, false);
        this.cleanupMachineData(machineKey);
    }

    // ‚úÖ C·∫¨P NH·∫¨T HO√ÄN TH√ÄNH CA L√ÄM VI·ªÜC
    async updateShiftCompletion(shift, finalData, endTime, status) {
        const duration = endTime - shift.startTime;
        const totalBottles = finalData.monitoringData['40007'] || 0;
        const totalWeight = this.calculateTotalWeight(finalData);
        
        shift.endTime = endTime;
        shift.duration = duration;
        shift.finalData = finalData;
        shift.totalBottlesProduced = totalBottles;
        shift.totalWeightFilled = totalWeight;
        shift.status = status;
        shift.updatedAt = endTime;
        
        await shift.save();
        
        console.log(`üíæ [${shift.machineName}] Shift ${status}:`);
        console.log(`   üìä Duration: ${Math.round(duration/1000)}s`);
        console.log(`   üç∂ Bottles: ${totalBottles}`);
        console.log(`   ‚öñÔ∏è Total Weight: ${totalWeight}g`);
        console.log(`   üìã Status: ${status}`);
        
        // Notify mainServer
        await notificationService.notifyMainServerShiftCompleted(shift);
    }

    // ‚úÖ SO S√ÅNH DATA
    compareShiftData(data1, data2) {
        if (!data1 || !data2) return false;
        
        // So s√°nh c√°c tr∆∞·ªùng quan tr·ªçng
        const key1 = data1.monitoringData?.['40007'] || 0; // S·ªë chai
        const key2 = data2.monitoringData?.['40007'] || 0;
        const weight1 = this.calculateTotalWeight(data1);
        const weight2 = this.calculateTotalWeight(data2);
        
        return (key1 === key2) && (Math.abs(weight1 - weight2) < 10); // Tolerance 10g
    }

    // ‚úÖ T√çNH T·ªîNG TR·ªåNG L∆Ø·ª¢NG
    calculateTotalWeight(data) {
        const low = data?.monitoringData?.['40005'] || 0;
        const high = data?.monitoringData?.['40006'] || 0;
        return (high * 65536) + low;
    }

    // ‚úÖ CLEANUP DATA
    cleanupMachineData(machineKey) {
        this.machineWorkStates.set(machineKey, {
            isWorking: false,
            currentShiftId: null,
            lastData: null
        });
        this.tempShiftData.delete(machineKey);
    }

    // ‚úÖ KH·ªûI T·∫†O STATE M√ÅY
    initializeMachineState(machine) {
        const machineKey = machine._id.toString();
        this.cleanupMachineData(machineKey);
    }

    // ‚úÖ L∆ØU CA CH∆ØA HO√ÄN CH·ªàNH
    async saveIncompleteShift(machine, previousState, currentTime) {
        const machineKey = machine._id.toString();
        const tempData = this.tempShiftData.get(machineKey);
        
        if (tempData && previousState?.currentShiftId) {
            try {
                const shift = await WorkShift.findOne({
                    shiftId: previousState.currentShiftId,
                    status: 'active'
                });
                
                if (shift) {
                    await this.updateShiftCompletion(shift, tempData, currentTime, 'incomplete');
                }
            } catch (error) {
                console.error(`‚ùå [${machine.name}] Error saving incomplete shift:`, error.message);
            }
        }
        
        this.cleanupMachineData(machineKey);
    }
}

export const workShiftService = new WorkShiftService();