import React from 'react';
import { Card, CardContent, Typography, Box, Grid, Chip, IconButton, Tooltip, Alert } from '@mui/material';
import { 
    Timer as TimerIcon, 
    LocalDrink as BottleIcon, 
    Scale as WeightIcon,
    Visibility as ViewIcon,
    Report as ReportIcon 
} from '@mui/icons-material';

const WorkShiftCard = ({ shift, onClick }) => {
    
    const getStatusInfo = (status) => {
        switch (status) {
            case 'completed':
                return { 
                    label: 'Ho√†n th√†nh', 
                    color: 'success',
                    icon: '‚úÖ',
                    description: 'Ca ƒë√£ ho√†n th√†nh v√† l∆∞u data ch√≠nh x√°c'
                };
            case 'incomplete':  // üÜï TH√äM
                return { 
                    label: 'Ch∆∞a ho√†n ch·ªânh', 
                    color: 'warning',
                    icon: '‚ö†Ô∏è',
                    description: 'Ca ƒë√£ l∆∞u nh∆∞ng data c√≥ th·ªÉ ch∆∞a ƒë·∫ßy ƒë·ªß'
                };
            case 'interrupted': // üÜï TH√äM
                return { 
                    label: 'B·ªã gi√°n ƒëo·∫°n', 
                    color: 'error',
                    icon: 'üö®',
                    description: 'Ca b·ªã gi√°n ƒëo·∫°n do m·∫•t k·∫øt n·ªëi'
                };
            case 'active':
                return { 
                    label: 'ƒêang ho·∫°t ƒë·ªông', 
                    color: 'info',
                    icon: 'üîÑ',
                    description: 'Ca ƒëang trong qu√° tr√¨nh th·ª±c hi·ªán'
                };
            default:
                return { 
                    label: status || 'Kh√¥ng x√°c ƒë·ªãnh', 
                    color: 'default',
                    icon: '‚ùì',
                    description: 'Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh'
                };
        }
    };

    const formatDuration = (duration) => {
        if (!duration) return 'N/A';
        const hours = Math.floor(duration / (1000 * 60 * 60));
        const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((duration % (1000 * 60)) / 1000);
        return `${hours}h ${minutes}m ${seconds}s`;
    };

    const formatWeight = (weight) => {
        if (!weight || weight === 0) return '0g';
        if (weight >= 1000) {
            return `${(weight / 1000).toFixed(2)}kg`;
        }
        return `${weight}g`;
    };

    const statusInfo = getStatusInfo(shift.status);

    return (
        <Card 
            sx={{ 
                mb: 2, 
                cursor: 'pointer',
                transition: 'all 0.2s ease',
                // ‚úÖ TH√äM: Border ƒë·∫∑c bi·ªát cho status incomplete/interrupted  
                border: (shift.status === 'incomplete' || shift.status === 'interrupted') 
                    ? `2px solid` 
                    : '1px solid',
                borderColor: (shift.status === 'incomplete' || shift.status === 'interrupted') 
                    ? `${statusInfo.color}.main` 
                    : 'divider',
                '&:hover': {
                    transform: 'translateY(-2px)',
                    boxShadow: 3
                }
            }}
            onClick={() => onClick && onClick(shift)}
        >
            <CardContent sx={{ p: 2 }}>
                {/* Header v·ªõi status badge n·ªïi b·∫≠t */}
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                    <Box>
                        <Typography variant="h6" sx={{ fontWeight: 600, fontSize: '1rem' }}>
                            {shift.shiftId}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                            Ca l√†m vi·ªác #{shift.shiftId.split('_').pop()?.slice(-6)}
                        </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        {/* ‚úÖ TH√äM: Chip v·ªõi icon v√† tooltip */}
                        <Tooltip title={statusInfo.description}>
                            <Chip 
                                label={
                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                                        <span>{statusInfo.icon}</span>
                                        {statusInfo.label}
                                    </Box>
                                }
                                color={statusInfo.color}
                                size="small"
                                sx={{ fontWeight: 500 }}
                            />
                        </Tooltip>
                        <Tooltip title="Xem chi ti·∫øt ca">
                            <IconButton 
                                size="small" 
                                color="primary"
                                onClick={(e) => {
                                    e.stopPropagation();
                                    onClick && onClick(shift);
                                }}
                            >
                                <ViewIcon fontSize="small" />
                            </IconButton>
                        </Tooltip>
                    </Box>
                </Box>

                {/* ‚úÖ TH√äM: Warning message cho incomplete/interrupted */}
                {(shift.status === 'incomplete' || shift.status === 'interrupted') && (
                    <Alert 
                        severity={shift.status === 'incomplete' ? 'warning' : 'error'} 
                        sx={{ mb: 2, py: 0.5 }}
                        icon={<ReportIcon fontSize="small" />}
                    >
                        <Typography variant="caption">
                            {shift.status === 'incomplete' 
                                ? 'Data c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·∫ßy ƒë·ªß khi k·∫øt th√∫c ca'
                                : 'Ca b·ªã gi√°n ƒëo·∫°n do m·∫•t k·∫øt n·ªëi - Data ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°m th·ªùi'
                            }
                        </Typography>
                    </Alert>
                )}

                {/* Time Info */}
                <Box sx={{ mb: 2 }}>
                    <Typography variant="caption" color="text.secondary">
                        üìÖ {new Date(shift.startTime).toLocaleString('vi-VN')}
                    </Typography>
                    {shift.endTime && (
                        <Typography variant="caption" color="text.secondary" sx={{ display: 'block' }}>
                            üìÖ {new Date(shift.endTime).toLocaleString('vi-VN')}
                        </Typography>
                    )}
                </Box>

                {/* Metrics Grid */}
                <Grid container spacing={1}>
                    <Grid item xs={4}>
                        <Box sx={{ textAlign: 'center' }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 0.5 }}>
                                <TimerIcon sx={{ fontSize: 16, color: 'primary.main' }} />
                                <Typography variant="caption" color="text.secondary">
                                    Th·ªùi gian
                                </Typography>
                            </Box>
                            <Typography variant="body2" sx={{ fontWeight: 600 }}>
                                {formatDuration(shift.duration)}
                            </Typography>
                        </Box>
                </Grid>
            </CardContent>
        </Card>
    );
};

export default WorkShiftCard;